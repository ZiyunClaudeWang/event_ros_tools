#
# Copyright 2021 Bernd Pfrommer <bernd.pfrommer@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

add_compile_options(-Wall -Wextra -Wpedantic -Werror)

# find dependencies
find_package(OpenCV REQUIRED)

find_package(ament_cmake REQUIRED)
find_package(ament_cmake_ros REQUIRED)
find_package(ament_cmake_auto REQUIRED)

set(ROS2_DEPENDENCIES
  "dvs_msgs"
  "prophesee_event_msgs"
  "event_array_msgs"
  "rclcpp"
  "rclcpp_components"
  "rosbag2_cpp"
  "image_transport"
  "cv_bridge"
  "builtin_interfaces"
  "rosidl_default_generators"
  "std_msgs"
)

foreach(pkg ${ROS2_DEPENDENCIES})
  find_package(${pkg} REQUIRED)
endforeach()

rosidl_generate_interfaces(${PROJECT_NAME}
  msg_ros2/Rate.msg
  DEPENDENCIES builtin_interfaces std_msgs
  ADD_LINTER_TESTS
  )

ament_auto_find_build_dependencies(REQUIRED ${ROS2_DEPENDENCIES})

#
# ---- slicer shared library/component
#
ament_auto_add_library(slicer SHARED
  src/event_subscriber_ros2.cpp
  src/image_updater.cpp
  src/statistics.cpp
  src/slicer_ros2.cpp)

rclcpp_components_register_nodes(slicer "event_ros_tools::Slicer")

ament_auto_add_executable(slicer_node
  src/slicer_node_ros2.cpp)

#
# ---- rate shared library/component
#
ament_auto_add_library(rate SHARED
  src/event_subscriber_ros2.cpp
  src/statistics.cpp
  src/rate_ros2.cpp)

add_dependencies(rate ${PROJECT_NAME})

rclcpp_components_register_nodes(rate "event_ros_tools::Rate")

ament_auto_add_executable(rate_node
  src/rate_node_ros2.cpp)

#
# --------
# this section is necessary to create the
# dependencies such that the messages are built and found
#

add_dependencies(rate_node ${PROJECT_NAME})

get_available_rmw_implementations(rmw_implementations2)
foreach(rmw_implementation ${rmw_implementations2})
  find_package("${rmw_implementation}" REQUIRED)
  get_rmw_typesupport(typesupport_impls "${rmw_implementation}" LANGUAGE "cpp")
  foreach(typesupport_impl ${typesupport_impls})
    rosidl_target_interfaces(rate
      ${PROJECT_NAME} ${typesupport_impl}
    )
    rosidl_target_interfaces(rate_node
      ${PROJECT_NAME} ${typesupport_impl}
    )
  endforeach()
endforeach()

# end of dependencies section
# -------------
#

# --- bag to text conversion tool
ament_auto_add_executable(bag_to_text
  src/bag_to_text_ros2.cpp)


# -------- installation

# the shared library goes into the global lib dir so it can
# be used as a composable node by other projects

install(TARGETS
  slicer rate
  DESTINATION lib
)

# the node must go into the paroject specific lib directory or else
# the launch file will not find it

install(TARGETS
  slicer_node
  rate_node
  bag_to_text
  DESTINATION lib/${PROJECT_NAME}/)

# install launch files
install(DIRECTORY
  launch
  DESTINATION share/${PROJECT_NAME}/
  FILES_MATCHING PATTERN "*.py")

install(DIRECTORY include/
  DESTINATION include)

if(BUILD_TESTING)
  find_package(ament_cmake REQUIRED)
  find_package(ament_cmake_copyright REQUIRED)
  find_package(ament_cmake_cppcheck REQUIRED)
  find_package(ament_cmake_cpplint REQUIRED)
  find_package(ament_cmake_clang_format REQUIRED)
  find_package(ament_cmake_flake8 REQUIRED)
  find_package(ament_cmake_lint_cmake REQUIRED)
  find_package(ament_cmake_pep257 REQUIRED)
  find_package(ament_cmake_xmllint REQUIRED)

  ament_copyright()
  ament_cppcheck(LANGUAGE c++)
  ament_cpplint(FILTERS "-build/include,-runtime/indentation_namespace")
  ament_clang_format()
  ament_flake8()
  ament_lint_cmake()
  ament_pep257()
  ament_xmllint()
endif()

ament_export_dependencies(rosidl_default_runtime)

ament_package()
